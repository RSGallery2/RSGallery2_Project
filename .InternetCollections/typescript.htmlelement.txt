



interference of "span" -> HTMLSpanElement
var span = document.createElement("span");  
span.isMultiLine = false;  // OK: HTMLSpanElement has isMultiline property
https://github.com/microsoft/TypeScript/blob/v3.7.2/lib/lib.dom.d.ts#L6693
--------------------------
3.9.2.4 Specialized Signatures
When a parameter type annotation specifies a string literal type (section 3.2.9), the containing signature is considered a specialized signature. Specialized signatures are used to express patterns where specific string values for some parameters cause the types of other parameters or the function result to become further specialized. For example, the declaration

interface Document {  
    createElement(tagName: "div"): HTMLDivElement;   
    createElement(tagName: "span"): HTMLSpanElement;  
    createElement(tagName: "canvas"): HTMLCanvasElement;  
    createElement(tagName: string): HTMLElement;  
}
states that calls to 'createElement' with the string literals "div", "span", and "canvas" return values of type 'HTMLDivElement', 'HTMLSpanElement', and 'HTMLCanvasElement' respectively, and that calls with all other string expressions return values of type 'HTMLElement'.

When writing overloaded declarations such as the one above it is important to list the non-specialized signature last. This is because overload resolution (section 4.15.1) processes the candidates in declaration order and picks the first one that matches.

--------------------------


--------------------------



--------------------------

How to work with form elements in typescript
https://stackoverflow.com/questions/29907163/how-to-work-with-form-elements-in-typescript
extends HTMLFormElement ->  form.elements,
extends HTMLCollection
extends HTMLFormControlsCollection 

---------------------------------------
html example "function generate form" + decorators
https://www.meziantou.net/generate-an-html-form-from-an-object-in-typescript.htm

-------------------------------------------

https://stackoverflow.com/questions/52491832/how-to-use-document-getelementbyid-method-in-typescript
Typescript will force you to check the value is not null if you use the strictNullChecks option (or strict which includes strictNullChecks). You can either perform the test or use a not null assertion (!). Also you will need to use a type assertion to assert the html element is an HTMLFormElement as by default it will be just an HtmlElement and reset is present only HTMLFormElement

Just an assertion Assertion:

(document.getElementById('myForm') as HTMLFormElement).reset();
Assertion with check (recommended):

let form = document.getElementById('myForm')
if(form) (form as HTMLFormElement).reset(); 
Not null assertion (if you want to access just HtmlElement member):

document.getElementById('myForm')!.click()


--------------------------


--------------------------


--------------------------






