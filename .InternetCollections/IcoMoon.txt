
http://ma.tvtmarine.com/en/blog/112-joomla-icomoon-icons-directory


Chip cullen


Using icons from icon fonts directly in CSS

Categorized as Tools,which was posted on July 7, 2013, and then updated on October 7, 2014	

I’ve become a huge, huge fan of icon fonts lately, for reasons well enumerated elsewhere.

However, in learning how to use them, I had to rethink how I wrote markup. For years, I’ve been using background images via CSS for the kinds of visual elements that I now wanted to use an icon font for. That meant actually inserting HTML elements for the icons – and not relying on CSS alone. I would need to insert something like:

 <span aria-hidden="true" data-icon="&#xe014;"></span>

That means more verbose markup, but is something I can live with.

The bummer is when you’re in a situation where inserting new markup is either impossible or at least very painful. I’m thinking of things like manipulating the menu markup generated by a CMS (e.g. it can be a royal pain in Drupal).

What I discovered is that you can insert an icon, using an icon font, purely in CSS. It just takes a little advanced CSS and a special re-writing of the icon unicode characters for the icon. Let’s say you’ve already generated your own icon font via a service like IcoMoon.io. Let’s also say the font is named “icon-font” or something else. When you download your font, you get an example page with all of the unicode characters that correspond to icons in your font.

The unicode characters look like &#xe002;. When generating a font via something like IcoMoon, these characters will be particular to your own font.

Typical usage for these unicode characters is to insert a span like shown earlier, then to use the data-icon attribute to insert the icon:

[data-icon]:before {
   font-family: icon-font; 
   content: attr(data-icon);
   speak: none;
} 

But what we are after is not having to touch the markup at all, while still using an icon font.

You can by target a specific element, then use the :before pseudo element, and insert the unicode character that way. It just takes a little tweak to how the character is written to escape the unicode character within CSS.

Let’s say you have a link in your navigation to “/about” and you want an icon to go along with that link. In you generated icon font, that icon is mapped to the unicode character &#xe002;. You would then target the link via an href attribute selector:

a[href*="about"]

Then insert the icon via :before –

a[href*="about"]:before {
    content: '\e002';
    font-family: 'icon-font';
}

The real trick is simply changing ‘&#xe002;‘ to ‘\e002;‘ when wanting to use the character directly within your CSS. You can apply whatever other CSS properties that you want to the icon – display, color, font-size, etc.

That same unicode escaping is also useful for targeting existing icon span elements. Let’s say we have the same span as before:

 <span aria-hidden="true" data-icon="&#xe002;"></span>

We can target that particular icon with this attribute selector:

[data-icon='\e002'] { ... }

This is most useful when need to slightly tweak an icon’s position when it exists in markup.

That’s how to include icon font generated icons without touching your HTML. You can also use the same unicode escaping to target existing icons that have been inserted into markup.

-----------------------

How to use IcoMoon and Icon Fonts – Part 2: A Workflow

Categorized as Tools, yet tagged as icomoon, icon fonts, icons,which was posted on August 3, 2013, and then updated on October 7, 2014	

In part 1 of this series, I talked about how to get up and running with IcoMoon, generating an icon font, and using it.

In this second post, I want to get into the workflow that I’ve figured out that makes working with icon fonts a lot of fun.

First, before we even crack open a text editor, making a conscious choice to use an icon font will impact design. No matter who is working on the visual design, either you or someone else – if you can agree on using icons in the design that are found on IcoMoon, it will make life much easier.

However, what if just the right icon isn’t available? Not to fear: IcoMoon lets you upload your own vector shapes. I will get more into that in Part 3.

Once I have a design direction in hand, and I want to start building an actual site, here is roughly what my workflow looks like:

    Look through the design and pick out all of the icons used.
    Go to IcoMoon and generate a font based on those icons.
    Download the generated font, and copy all four font formats into my /fonts/ directory, while keeping the folder I downloaded from IcoMoon intact.
    Start building my site, inserting icons as needed.
    During this implementation, I keep the index.html file from the IcoMoon folder open in a separate browser tab, so I can reference the unicode character strings. This is why I copy the font files out and leave the IcoMoon folder alone – the index.html file won’t work if you just move all of the font files.
    Missed an icon in the design? The client change their mind? Not to worry. You can go back to IcoMoon, and if you haven’t changed your font for a new project, you should be able to add/modify icons then re-download your font. I just copy the font files out all over again.
    You should make an ongoing practice of downloading the ‘session’ file that IcoMoon makes available, so you can go back and edit your font further on down the line:

Hit "store session", which is available at the bottom of the app screen

Now, I should also mention that the code I showed in Part 1 is kind of a lie. These days I’m writing all of my CSS in SASS, so my actual code looks a little different.

First, in my _variables.scss partial, I keep font stacks as variables. So I create one for my icon font:

$icon-font: 'icomoon'; //or whatever your font name is

You can also keep your CSS-escaped unicode strings in easier-to remember variables, as well:

$icon-rocketship: '\e000';

Then you insert it via a pseudo element:

.foo {
  &:before {
    content: $icon-rocketship;
    font-family: $icon-font;
    speak: none;
    font-weight: normal;
  }
}               

Or, if you include the class name stack from the IcoMoon style.css, you can @extend as well:

.foo {
  &:before {
    @extend .icon-rocket; //found in the downloaded style.css 
  }
}

One thing that I’ve done on a recent project was to create an icon font silent extendable class. It looks like this:

%icon {
  font-family: $icon-font;
  speak: none;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
}

Which can then be used like this:

.foo {
    &:before {
      @extend %icon;
      content: $icon-rocketship;
    }
}       

Easy as vector based pie.

So that is a little insight into how I’ve ended up working with icon fonts. In Part 3 I’m going to share some ninja-level IcoMoon tricks that will show you how powerful the tool really is.
--------

How to use IcoMoon and Icon Fonts – Part 3: 7 Ninja Tricks

Categorized as Tools, yet tagged as icomoon, icon fonts, icons,which was posted on August 10, 2013, and then updated on October 31, 2015	

This last of three posts about IcoMoon is going to cover just a few tips and tricks to get the most out of IcoMoon. Some involve the app itself, some are more to do with implementation. Let’s get to it!

Ninja Trick 1: Adding other icon sets to IcoMoon’s app

IcoMoon has several icon sets that you can choose from. When in the ‘selection’ screen, either click on the “Icon Library” button at the top of the screen:

Icon Library Button

Or scroll to the bottom and hit “More Icon Sets…”

More Icon Sets

And select other sets that you want to include.

Other icons sets

Some are free and have very open licenses, others cost some money. Usually the ones with CC (Creative Commons) licenses are free to use.
Ninja Trick 2: Editing icons in your font

Like an icon that you found, but want it rotated the other way? Need it to be ‘larger’ within the font itself? One of the coolest things about IcoMoon is that it lets you control the icons in your font (to a certain extent). If you are in the ‘selection screen’ and click the “edit” button

The edit mode button

You are now in ‘edit mode’, which means if you now click on an icon, you get the ‘edit screen’

Editing an Icon

Which lets you:

    Rotate
    Flip
    Scale
    Move

This helped me out a great deal on one project where I inserted an icon, but it needed to be a little bit bigger, but sizing it up with CSS was causing unwanted other effects. By being able to scale up the individual icon within the font, I was good to go.
Ninja Trick 3: Adding your own shapes to your icon font

As was eluded to in Part 2, what if the shape or icon you want is not available as part of the IcoMoon set (or any of the other sets available)? Not to worry. As long as you have a vector based version of your particular icon, you’re in luck.

    Export your custom icon as an SVG (in Illustrator File > Save As and select “SVG 1.1”)
    In the IcoMoon icon ‘selection screen’ click the “Import Icons” button

Import Icons button

and upload your .svg file

    You can edit your shape before saving it to your font – just like editing any other icon

Keep in mind that you’ll have more luck with black shapes, and if they are as clean as possible when it comes to vector points.
Ninja Trick 4: Changing the font name

IcoMoon generates your icon font with a default name of ‘icomoonxxxxxx’. You can change what the name of the font, in the ‘font’ screen, by clicking on ‘font preferences’

The preference button

And changing it there. that way you can give your font files a more project-specific name.
Ninja Trick 5: Downloading your font config file

One thing that I recommend you do after generating and downloading a font is to be sure to download your ‘session’ file – which you can get at any point by clicking the ‘store session’ link at the bottom of the screen:

Be sure to save your session

This will download a .json file that contains the information of where your font was when you were editing it – which icons you chose, out of which sets, and any adjustments you made to them. You can keep this file with your project and in version control so you can always go back later, and ‘load session’ to get back to where you were.

IcoMoon is smart enough to remember where you were when you last used your browser – but if you change computers or browser, it can’t know what you were up to. That’s why the session file is so important.

In fact, if I had one request of IcoMoon it would be to include the session file by default when you download your font. I’ve not tried it myself, but theoretically you can actually reimport one of your font files and start work from there, as well.
Ninja Trick 6: Changing an icon with JavaScript / jQuery

This took me a good hour or so to figure out the other day, so I thought I’d share my lesson. Let’s say you have an icon inserted with HTML, and you want to change the icon itself? In my case I was trying to change the icon on a button from pause to play and back again. You have to write the HTML entity a little differently when manipulating it in jQuery:

//HTML:
<a href="#" id="pausePlayButton">
    <span aria-hidden="true" id="playPauseIcon" data-icon="&#xe001;"></span>
</a>    
//jQuery:
$("#pausePlayButton").click(function(){
    $(this).children("#pausePlayIcon").attr("data-icon" , '\ue002');
});

All we are doing is changing the content of the data-icon attribute, but we need to escape the new value that we’re passing with the \u at the beginning.
Ninja Trick 7: Get your SASS on

This doesn’t really have anything to do with IcoMoon specifically, but rather implementation of an icon font. As I covered previously, there are some ways to use the power of SASS to make using icons really easy.

I’ve taken that even further and created a ‘power duo’ of an extendable and a mixin that you can use to easily add icons via CSS and keep your final code as lean as possible.

The first part, the extendable “%icon” keeps most of the CSS that you will need to use an icon. By making this extendable, all of the selectors that end up using it are ganged together. That’s a lot better than having this stack of CSS get repeated all over the place, causing your final CSS output to be bloated.

The mixin “icon” merely references that extendable, and lets you pass the escaped HTML entity as an argument. You can also optionally include “before” or “after” if you want the mixin to create the pseudo element for you. (The majority of the time you won’t use that optional argument, as you’ll probably need to apply further rules to the icon).

So now, to use an icon, you can simply write this:

.foo {
    &:before {
        @include icon('\e001');
        // other rules
    }
}

Or if you want to have it create the pseudo element for you:

.foo {
        @include icon('\e001', before);
}

If you really want to go down the SASS rabbit hole, you can even set your icon HTML entities as variables, which will be easier to remember, and easy to change down the line:

//kept in a variables partial
$icon-rocketship: '\e001';
//-----
.foo {
    &:before {
        @include icon($icon-rocketship);
        // other rules
    }
}

Blast off! Grab the extendable and mixin here!
Conclusion

So this concludes the three part series on IcoMoon and Icon fonts. I will try to follow up in the future with even more ticks that you can use to unleash the power of icon fonts (things like ligatures, mapping different characters, etc).








