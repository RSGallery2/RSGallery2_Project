
What is the proper way to make an AJAX call in component?

http://joomla.stackexchange.com/questions/146/what-is-the-proper-way-to-make-an-ajax-call-in-component


Abstract
There is almost no really official way of dealing with this, it much depends on the complexity and how much you want to rely on the MVC pattern to do the work.
Below are some possible solutions what should work in Joomla 2.5 and 3.x. The code is not presented for a copy - paste job but rather as a general idea.
Prior to Joomla! 3.2 the only thing you need to use the examples below is a component. After Joomla 3.2 (for lower complex tasks) you can handle request from modules and plugins.

Generic HTML response (following legacy MVC)
Your URL for the task needs to look like this:
index.php?option=com_similar&task=abc&format=raw
You than create the controller which will use the view, let's say Abc, which will contain the file view.raw.html (identical to a normal view file).
Below you have the code for generate a raw HTML response:
/controller.php
public function abc() 
{
    // Set view

    // Joomla 2.5
    JRequest::setVar('view', 'Abc'); 

    // (use JInput in 3.x)
    $this->input->set('view', 'Abc');

    parent::display();
}


/views/abc/view.raw.php
<?php
defined('_JEXEC') or die;

jimport('joomla.application.component.view');

class SimilarViewAbc extends JViewLegacy
{
    function display($tpl = null)
    {
        parent::display($tpl);
    }
}


/views/abc/tmpl/default.php
<?php

echo "Hello World from /views/abc/tmpl/default.php";


Note: This is the solution I would use if I had to return HTML (it's cleaner and follows Joomla logic). For returning simple JSON data, see below how to put everything in the controller.

Subcontrollers

If you make your Ajax request to a subcontroller, like:

index.php?option=com_similar&controller=abc&format=raw

Than your subcontroller name (for the raw view) needs to be abc.raw.php.

This means also that you will / may have 2 subcontrollers named Abc.

If you return JSON, it may make sense to use format=json and abc.json.php. In Joomla 2.5. I had some issues getting this option to work (somehow the output was corrupted), so I used raw.


Valid JSON Response (following new / legacy MVC)

If you need to generate a valid JSON response, check out the docs page Generating JSON output
// We assume that the whatver you do was a success.
$response = array("success" => true);
// You can also return something like:
$response = array("success" => false, "error"=> "Could not find ...");

// Get the document object.
$document = JFactory::getDocument();

// Set the MIME type for JSON output.
$document->setMimeEncoding('application/json');

// Change the suggested filename.
JResponse::setHeader('Content-Disposition','attachment;filename="result.json"');

echo json_encode($response);


You would generally put this code in the controller (you will call a model which will return the data you encode - a very common scenario). If you need to take it further, you can also create a JSON view (view.json.php), similar with the raw example.


Security

Now that the Ajax request is working, don't close the page yet. Read below.

Don't forget to check for request forgeries. JSession::checkToken() come in handy here. Read the documentation on How to add CSRF anti-spoofing to forms


Multilingual sites

It may happen that if you don't send the language name in the request, Joomla won't translate the language strings you want.

Consider appending somehow the lang param to your request (like &lang=de).


Joomla! Ajax Interface

New in Joomla 3.2! - enabled you to make handle requests without building a component

Joomla! Ajax Interface - Joomla now provides a lightweight way to handle Ajax request in a plugin or module. You may want to use the Joomla! Ajax Interface if you don't have already a component or if you need to make requests from a module your already have.


shareimprove this answer
 

edited Apr 23 '14 at 8:37 





 

answered Apr 23 '14 at 7:57 



 
Valentin Despa? 
3,05411039 
 
 
 


8     
 
Best quality answer I've seen on joomla.stackexchange.com so far - nicely done and way to raise the bar. Excellent job! – NivF007 Apr 23 '14 at 8:28 
 

       
 
Agree, but what about JRequest? It is deprecated should it be simply $this->input since I use v3.x? – Dmitry Rekun Apr 23 '14 at 8:32 
 

1     
 
I addressed your concern regarding JRequest. Thanks – Valentin Despa? Apr 23 '14 at 8:36 
 

3     
 
Nice answer, just wanted to mention that there is a Joomla class since 3.1 that handles JSON output: API, Usage – fruppel Apr 23 '14 at 8:51  
 

       
 
@fl0r yeap, Valentin mentioned it in Valid JSON Response section. – Dmitry Rekun Apr 23 '14 at 8:55  
 

 show 5 more comments 
 
 


 
up vote

14

down vote
 

This is a late answer for this very well answered question, but I wanted to add this cut-to-the-chase solution for those that just need a simple way to get to their components's data with an AJAX call.

With all the Joomla versions, 3rd party possibilities, and hacks that I found over several days of googling, this was the simplest approach I could come up with - and feedback is DEFINATELY appreciated.
1.Added function execute to my existing main controller
2.Created a subcontroller with a public function for the task(s) I wanted to call with AJAX
3.Used the built in Joomla JResponseJson class to handle the output (it's really nice!)

URL to call/execute the task:

www.mysite.com/index.php?option=com_example&task=ForAjax.mytaskname

Modified Main Controller \com_example\controller.php
class ExampleController extends JControllerLegacy {
    public function display($cachable = false, $urlparams = false) {
        $app = JFactory::getApplication();
        $view = $app->input->getCmd('view', 'default');
        $app->input->set('view', $view);
        parent::display($cachable, $urlparams);
        return $this;
    }

    public function execute()
    {
        // Not technically needed, but a DAMN good idea.  See http://docs.joomla.org/How_to_add_CSRF_anti-spoofing_to_forms
        // JSession::checkToken();
        $task = JFactory::getApplication()->input->get('task');
        try
        {
            parent::execute($task);
        }
        catch(Exception $e)
        {
            echo new JResponseJson($e);
        }
    }
}


New Subcontroller \com_example\controllers\forajax.php
require_once JPATH_COMPONENT.'/controller.php';
class ExampleControllerForAjax extends ExampleController
{
    public function MyTaskName()
    {
        $app = JFactory::getApplication();

        $data['myRequest'] =$_REQUEST;
        $data['myFile'] =__FILE__;
        $data['myLine'] ='Line '.__LINE__;

        $app->enqueueMessage('This part was reached at line ' . __LINE__);
        $app->enqueueMessage('Then this part was reached at line ' . __LINE__);
        $app->enqueueMessage('Here was a small warning at line ' . __LINE__, 'warning');
        $app->enqueueMessage('Here was a big warning at line ' . __LINE__, 'error');

        $task_failed = false;
        echo new JResponseJson($data, 'My main response message',$task_failed);

        $app->close();
    }
}


Rendered JSON Output
{
    success: true,
    message: "My main response message",
    messages: {
        message: [
            "This part was reached at line 26",
            "Then this part was reached at line 27"
        ],
        warning: [
            "Here was a small warning at line 28"
        ],
        error: [
            "Here was a big warning at line 29"
        ]
    },
    data: {
        myRequest: {
            option: "com_example",
            task: "mytaskname",
            Itemid: null
        },
        myFile: "C:\mysite\components\com_example\controllers\forajax.php",
        myLine: "Line 24"
    }
}



shareimprove this answer
 

edited Jul 10 '14 at 1:53 





 

answered Jul 9 '14 at 17:14 



 
GDP 
4,6341543 
 
 
 

  

add a comment  
